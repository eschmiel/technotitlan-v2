Plan for new position system.
-- 6/10/23 

Adjacency lists seem like the go to data structures for representing graphs and facilitating their traversal.

Adjacency list representing each position and the positions adjacent to them.

In this case, our nodes are our positions.

two dimensional array for allowing position index lookup by coordinates

positionCoordinates array allowing coordinates look up by position index

WHY DO WE NEED THESE?

- Coordinates 
- - help determine spatial relationships between positions i.e. is a node above, to the left, below or to the right of another node.
- - Lets us know where a position is on the screen, so we know what screen coordinates to draw an object at the given position.
- Adjacency List
- - Easily determine paths and distance between positions.

- Spatial Relationships
- - Navigating the selector. 
- - - The selector is supposed to move between positions according to a given a spatial relationship in response to controller input,
- - - even if that position doesn't exist as a node on the graph.
- Drawing
- - We need a way to compute the screen coordinates to draw something at a given node.

- Units should exist at graphPosition. The selector should exist at screenPosition.

TO-DO

- Take map data and build graph data structure out of it
- 



Graph positions vs screen positions

-Selector navigates by screen position
-Game objects exist at graph positions.

WHY THESE ABSTRACTIONS?

Screen Position
- Selector
- - Needs to navigate by screen position for ease of user experience. Selector position should not be limited
- - by what's navigable for objects. It should be able to pass over walls and things not on the graph for ease of use.
- Drawing
- - Need to be able to translate a graph position into screen coordinates so we know where to 
- - draw something at a given graph position on the screen.

Graph Position
- Pathfinding
- - We need to be able to determine if there is navigable path between two positions given a certain degree of seperation, 
- - what that path is and which path is the shortest.
- - This is a primary concern for game objects.

NEED:

- Look up graph position by screen position
- Look up screen position by graph position

TO-DO

- Take map data and 
- - build graph data structure out of it
- - build mapPositionToGraphPosition table out of it
- - build graphPositionToMapPosition table out of it
- Set up units with graph positions.
- Run selector logic off of new units
